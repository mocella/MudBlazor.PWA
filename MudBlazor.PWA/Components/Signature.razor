@inject IJSRuntime jsRuntime
@inject ISnackbar Snackbar

<MudStack Class="pa-4" Row="true">
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CaptureSignature">Capture Signature</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="ClearSignature">Clear Signature</MudButton>
</MudStack>
<MudPaper Class="pa-4">
    <h3>Signature</h3>
    <canvas id="signatureCanvas" width="@CanvasWidth" height="@CanvasHeight" style="border:1px solid #000;"></canvas>
</MudPaper>

<MudPaper Class="pa-4 mt-2">
    <h3>Captured Image</h3>
    <canvas id="capturedCanvas" width="@CanvasWidth" height="@CanvasHeight" style="border:1px solid #000;"></canvas>
</MudPaper>

@code {
    [Parameter] public int CanvasWidth { get; set; } = 640;
    [Parameter] public int CanvasHeight { get; set; } = 480;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InvokeVoidAsync("initSignatureCanvas");
        }
    }

    private async Task CaptureSignature()
    {
        await jsRuntime.InvokeVoidAsync("captureSignatureCanvas", "signatureCanvas", "capturedCanvas");
        Snackbar.Add("Signature captured successfully!", Severity.Normal);
        
    }

    private async Task ClearSignature()
    {
        await jsRuntime.InvokeVoidAsync("clearSignatureCanvas", "signatureCanvas");
    }

}

<script>
    let isDrawing = false, lastX = 0, lastY = 0;
    let canvas, ctx;

    function initSignatureCanvas() {
        canvas = document.getElementById("signatureCanvas");
        if (canvas) {
            ctx = canvas.getContext("2d");
            ctx.lineWidth = 2;
            ctx.lineCap = "round";
            canvas.addEventListener("mousedown", startPosition);
            canvas.addEventListener("mousemove", draw);
            canvas.addEventListener("mouseup", endPosition);
            canvas.addEventListener("mouseout", endPosition);
            // Touch events for mobile devices
            canvas.addEventListener("touchstart", startTouch);
            canvas.addEventListener("touchmove", touchDraw);
            canvas.addEventListener("touchend", endTouch);
        }
    }

    function startPosition(e) {
        isDrawing = true;
        [lastX, lastY] = [e.offsetX, e.offsetY];
    }

    function draw(e) {
        if (!isDrawing) return;
        ctx.beginPath();
        ctx.moveTo(lastX, lastY);
        ctx.lineTo(e.offsetX, e.offsetY);
        ctx.stroke();
        [lastX, lastY] = [e.offsetX, e.offsetY];
    }

    function endPosition() {
        isDrawing = false;
    }

    function startTouch(e) {
        if (e.touches.length > 0) {
            const touch = e.touches[0];
            const rect = canvas.getBoundingClientRect();
            lastX = touch.clientX - rect.left;
            lastY = touch.clientY - rect.top;
            isDrawing = true;
        }
    }

    function touchDraw(e) {
        if (!isDrawing) return;
        e.preventDefault();
        const touch = e.touches[0];
        const rect = canvas.getBoundingClientRect();
        const x = touch.clientX - rect.left;
        const y = touch.clientY - rect.top;
        ctx.beginPath();
        ctx.moveTo(lastX, lastY);
        ctx.lineTo(x, y);
        ctx.stroke();
        lastX = x;
        lastY = y;
    }

    function endTouch(e) {
        isDrawing = false;
    }

    function captureSignatureCanvas(sourceCanvasId, targetCanvasId) {
        const sourceCanvas = document.getElementById(sourceCanvasId);
        const targetCanvas = document.getElementById(targetCanvasId);
        if (sourceCanvas && targetCanvas) {
            const imageData = sourceCanvas.toDataURL("image/png");
            const targetCtx = targetCanvas.getContext("2d");
            const img = new Image();
            img.onload = function () {
                targetCtx.clearRect(0, 0, targetCanvas.width, targetCanvas.height);
                targetCtx.drawImage(img, 0, 0, targetCanvas.width, targetCanvas.height);
            };
            img.src = imageData;
        }
    }

    function clearSignatureCanvas(canvasId) {
        const canvas = document.getElementById(canvasId);
        if (canvas) {
            const context = canvas.getContext("2d");
            context.clearRect(0, 0, canvas.width, canvas.height);
        }
    }
</script>