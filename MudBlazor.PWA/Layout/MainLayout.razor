@inherits LayoutComponentBase

<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode"/>
<MudPopoverProvider/>
<MudDialogProvider/>
<MudSnackbarProvider MaxDisplayedSnackbars="3" PreventDuplicates="true"/>

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start"
                       OnClick="@(e => DrawerToggle())"/>
        <MudText Typo="Typo.h5" Class="ml-3">DriversEdge</MudText>
        <MudSpacer/>
        <MudIconButton Icon="@(_isDarkMode ? Icons.Material.Filled.DarkMode : Icons.Material.Filled.LightMode)"
                       Color="Color.Inherit" OnClick="ThemeButtonClick"/>
        <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit"/>
        <MudText>John Smith</MudText>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Overlay="false" Elevation="1" Variant="@DrawerVariant.Mini"
               ClipMode="DrawerClipMode.Always">
        <NavMenu/>
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Medium">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>


@code {
    bool _drawerOpen = true;
    private bool _isDarkMode;
    private MudThemeProvider _mudThemeProvider;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            StateHasChanged();
        }
    }

    private Task OnSystemPreferenceChanged(bool newValue)
    {
        _isDarkMode = newValue;
        StateHasChanged();
        return Task.CompletedTask;
    }

    void ThemeButtonClick(MouseEventArgs args)
    {
        _isDarkMode = !_isDarkMode;
        StateHasChanged();
    }

}